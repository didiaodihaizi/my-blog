webpackJsonp([5],{kJn3:function(p,l,e){"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.default={id:1,title:"简单说说webpack",desc:"真的简单说说",create_time:"2019-10-26",content:'<h1 class="ql-align-center">简单介绍webpack</h1><p class="ql-align-center"><br></p><h2>常见的构建工具有哪些？</h2><p><br></p><p>\t\t随着项目越来越复杂、vue、react、angular等框架出现，前后端分离，前端组件化、舒适的开发环境配置等等的需要，市面上也出现了帮助我们完成这些项目的构建，开发环境的配置等等的工具，如grunt、gulp、webpack、parcel、<span style="background-color: rgb(255, 255, 255); color: rgb(64, 64, 64);">rollup</span></p><p>\t\t前两种，grunt和gulp这两种我没怎么了解过，只有在维护公司老项目的时候才有用到过，所以不好评价</p><p>\t\t<strong>parcel</strong>是一个号称零配置的极速web应用打包工具，简单来说的确是零配置，很方便，也曾经用过它做过一个项目，但是后面还是改了用webpack了，因为随着项目的复杂度的增加，会发现自己慢慢地跌入了所谓的零配置的深坑中，比较适合简单项目中使用</p><p>\t\t<strong>rollup</strong>则更偏向于js库的打包构建，如vue、react就是使用rollup进行打包的，当然使用webpack也可以，但是实验表明，使用rollup打包构建的脚本库会比webpack打包的体积要小（因为webpack还要引入依赖的代码，如<span style="color: rgb(230, 0, 0);">__webpack_require__</span>）导致性能的下降</p><p>\t\t<strong>webpack</strong>则是另外一种打包构建工具，估计也是现在大部分前端使用的工具吧，webpack相对来说上手难度可能高一点（现在降低了，mode字段配不同的值可以自动帮你开启相应的插件），不能像parcel那样做到零配置，但是它却有个plugins、loader体系，能让我们做到很多项目打包构建或者运行时要做的东西，所以这也是大部分项目使用webpack的原因</p><p><br></p><h2>webpack配置项介绍</h2><p><br></p><ul><li><strong>Entry</strong>：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li><li><strong>Module</strong>：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li><li><strong>Chunk</strong>：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li><strong>Loader</strong>：模块转换器，用于把模块原内容按照需求转换成新内容。</li><li><strong>Plugin</strong>：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li><li><strong>Output</strong>：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li></ul><p><br></p><h2>webpack流程介绍</h2><p><br></p><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li><li>确定入口：根据配置中的 entry 找出所有的入口文件；</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li><li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>'}}});
//# sourceMappingURL=5.6b1adadb136f02cc5186.js.map