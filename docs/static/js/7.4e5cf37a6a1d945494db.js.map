{"version":3,"sources":["webpack:///./src/article/performance/2.js"],"names":["Object","defineProperty","__webpack_exports__","value","id","title","desc","create_time","content"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAeD,EAAA,SACXE,GAAM,EACNC,MAAS,UACTC,KAAQ,iBACRC,YAAe,aACfC,QAAA","file":"static/js/7.4e5cf37a6a1d945494db.js","sourcesContent":["export default {\n    \"id\": 2,\n    \"title\": \"性能优化-缓存\",\n    \"desc\": \"协商缓存、强缓存、cdn缓存\",\n    \"create_time\": \"2019-10-20\",\n    \"content\": `<h1 class=\"ql-align-center\">性能优化-缓存</h1><p><br></p><h2>1. 浏览器缓存有什么用？</h2><p><br></p><ol><li><strong style=\"color: rgb(230, 0, 0);\"><em>大幅度提高用户第二次进入网页时的速度</em></strong>，当用户非第一次进入网站时，浏览器匹配到资源后，会优先读取本地的缓存，若有缓存则直接在本地取，而无需取服务器的资源，大幅度减少获取资源的时间，提升用户进入网页的速度；</li><li><strong style=\"color: rgb(230, 0, 0);\"><em>节省服务器带宽、成本</em></strong><strong><em>，</em></strong>这个很显而易见，因为老用户获取资源时，都不需要从服务器取了，减少了服务器的成本、压力了</li></ol><p><br></p><h2>2. 浏览器缓存有多少种？</h2><p><br></p><p>浏览器缓存分为两种，一种是<strong style=\"color: rgb(230, 0, 0);\">强缓存</strong>，一种是<strong style=\"color: rgb(230, 0, 0);\">协商缓存</strong><strong>，</strong>下面阐述下它们分别是什么：</p><ol><li>强缓存：若有本地缓存则强制浏览器使用本地缓存</li><li>协商缓存：虽然本地有缓存，但是需要跟服务器请求下，该资源是否有改动过，若无则继续使用本地缓存，若改动了则使用服务器的资源</li></ol><p><br></p><p>所以：我们可以知道当资源不经常甚至不需要改动时，我们可以给该资源设置强缓存，如webpack打包后带哈希值的js文件图片css文件等，若资源经常改动，我们则需要设置协商缓存，保证资源能及时获取最新的</p><p><br></p><h2>3. 如何设置缓存策略？</h2><p><br></p><p>答：使用response header的cache-control字段设置，该字段常用的有以下这些值：</p><ol><li><strong style=\"color: rgb(230, 0, 0);\">max-age</strong>=60：本地强缓存60s</li><li><strong style=\"color: rgb(230, 0, 0);\">no-cache</strong><strong>: </strong>协商缓存，每次都去请求服务器资源若返回304则使用本地缓存，反之继续缓存</li><li><strong style=\"color: rgb(230, 0, 0);\">no-store</strong><strong>: </strong>不缓存，每次都从服务器获取资源</li><li><strong style=\"color: rgb(230, 0, 0);\">public</strong>: 任何代理、客户端都可缓存（默认）</li><li><strong style=\"color: rgb(230, 0, 0);\">private</strong><strong>: </strong>只有客户端可以缓存，cdn之类的代理无法缓存</li></ol><p>一般使用以上5个值，即可以完成一个较为完善的缓存策略</p><p><br></p><h2>我的缓存策略</h2><p>对于不改动的资源，如webpack构建出来的或者jquery之类的脚本库，我们可以设置缓存：max-age=31536000  强缓存一年</p><p>对于html之类的经常改动的资源，可以设置:max-age-60或者no-cache</p><p><br></p><p>response header的改动可以让运维在nginx上配（如果自己能操作机器，自己配也行），若有cdn，cdn默认会带上你返回的response头</p><p><br></p><h2>4. 不设置缓存策略可以吗？</h2><p><br></p><p>\t\t答：<strong style=\"color: rgb(230, 0, 0);\">不可以！！！</strong></p><p>\t\t在我来到现在这家公司时，发现大家上线项目就是申请机器、域名、域名解析、构建部署，然后就没了，没有意识去做<strong style=\"color: rgb(230, 0, 0);\">缓存策略</strong><span style=\"color: rgb(230, 0, 0);\">！！！</span></p><p>\t\t大家都抱着这想法：<strong style=\"color: rgb(240, 102, 102);\">我们没有缓存策略，那资源就一直取服务器的呗，这有什么关系？多点带宽成本而已。。</strong></p><p>\t\t其实，不然，当我们cache-control什么都没设置时，浏览器会默认从response header获取资源的最后修改时间：<strong style=\"color: rgb(230, 0, 0);\">last-modified和date</strong><strong style=\"color: rgb(84, 84, 84);\">，</strong>也就是资源最后修改时间和当前获取资源的时间，然后做强缓存，时间为<strong style=\"color: rgb(230, 0, 0);\">(date - last-modified)/10 </strong>的时间，也就是<strong style=\"color: rgb(230, 0, 0);\">当前时间-最后修改时间的差值的10%</strong>，这样的话当我们改bug或者上线新版本时，就可能会有部分用户还在用着老版本的页面，甚至部分缓存没了，从服务器也获取不到了，导致页面不可用等等等等，所以说，缓存策略很重要，上线项目时，一定要做好缓存策略</p>`\n}\n\n\n// WEBPACK FOOTER //\n// ./src/article/performance/2.js"],"sourceRoot":""}